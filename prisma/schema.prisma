generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  RESIDENT
  MODERATOR
  STAFF
  COUNCIL_MEMBER
  ADMIN
}

enum MeetingStatus {
  UPCOMING
  ACTIVE
  ENDED
}

enum CommentVisibility {
  PENDING_VISIBLE
  VISIBLE
  HIDDEN
  WITHDRAWN
}

enum CommentStance {
  FOR
  AGAINST
  CONCERNED
  NEUTRAL
}

enum ModerationAction {
  HIDE
  RESTORE
  ANNOTATE
  FLAG
}

enum RecommendationStatus {
  DRAFT
  PUBLISHED
  CLOSED
  ARCHIVED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(RESIDENT)
  address   String?
  zipCode   String?
  district  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailOtps             EmailOTP[]
  comments              Comment[]
  moderationLogs        ModerationLog[]
  recommendations       Recommendation[]
  recommendationComments RecommendationComment[]
  votes                 Vote[]

  @@index([email])
  @@index([role])
}

model EmailOTP {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String
  codeHash  String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([email, expiresAt])
  @@index([userId])
}

model Meeting {
  id          String        @id @default(cuid())
  title       String
  description String?
  body        String        @default("COUNCIL")
  startTime   DateTime
  endTime     DateTime
  status      MeetingStatus @default(UPCOMING)
  location    String?
  videoUrl    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  agendaItems AgendaItem[]
  comments    Comment[]

  @@index([status])
  @@index([startTime])
}

model AgendaItem {
  id           String    @id @default(cuid())
  meetingId    String
  meeting      Meeting   @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  code         String
  title        String
  description  String?
  orderIndex   Int
  cutoffTime   DateTime?
  supportingDocs Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  commentItems CommentOnItem[]

  @@unique([meetingId, code])
  @@index([meetingId])
  @@index([cutoffTime])
}

model Comment {
  id               String            @id @default(cuid())
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  meetingId        String
  meeting          Meeting           @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  rawBody          String            @db.Text
  publicBody       String            @db.Text
  stance           CommentStance
  visibility       CommentVisibility @default(PENDING_VISIBLE)
  latitude         Float?
  longitude        Float?
  roundedLatitude  Float?
  roundedLongitude Float?
  piiDetected      Boolean           @default(false)
  profanityDetected Boolean          @default(false)
  riskFlags        Json?
  moderationNotes  String?
  withdrawnAt      DateTime?
  submittedAt      DateTime          @default(now())
  visibleAt        DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  agendaItems    CommentOnItem[]
  moderationLogs ModerationLog[]

  @@index([userId])
  @@index([meetingId])
  @@index([visibility])
  @@index([stance])
  @@index([submittedAt])
}

model CommentOnItem {
  id           String     @id @default(cuid())
  commentId    String
  comment      Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  agendaItemId String
  agendaItem   AgendaItem @relation(fields: [agendaItemId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@unique([commentId, agendaItemId])
  @@index([commentId])
  @@index([agendaItemId])
}

model ModerationLog {
  id         String           @id @default(cuid())
  commentId  String?
  comment    Comment?         @relation(fields: [commentId], references: [id], onDelete: SetNull)
  moderatorId String
  moderator  User             @relation(fields: [moderatorId], references: [id])
  action     ModerationAction
  reason     String?
  metadata   Json?
  createdAt  DateTime         @default(now())

  @@index([commentId])
  @@index([moderatorId])
  @@index([action])
  @@index([createdAt])
}

model Recommendation {
  id          String               @id @default(cuid())
  userId      String
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  body        String               @db.Text
  tags        String[]
  status      RecommendationStatus @default(DRAFT)
  upvotes     Int                  @default(0)
  downvotes   Int                  @default(0)
  hotScore    Float                @default(0)
  publishedAt DateTime?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  comments RecommendationComment[]
  votes    Vote[]

  @@index([userId])
  @@index([status])
  @@index([hotScore])
  @@index([publishedAt])
}

model RecommendationComment {
  id               String         @id @default(cuid())
  recommendationId String
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  userId           String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId         String?
  parent           RecommendationComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  body             String         @db.Text
  isHidden         Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  replies          RecommendationComment[] @relation("CommentReplies")

  @@index([recommendationId])
  @@index([userId])
  @@index([parentId])
}

model Vote {
  id               String         @id @default(cuid())
  recommendationId String
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  userId           String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  value            Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([recommendationId, userId])
  @@index([recommendationId])
  @@index([userId])
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}